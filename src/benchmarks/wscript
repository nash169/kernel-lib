#!/usr/bin/env python
# encoding: utf-8

import os
import fnmatch


def build(bld):
    # Includes
    includes_path = ".."

    # Get source files
    sources = []
    for root, _, filenames in os.walk(bld.path.abspath()):
        for filename in fnmatch.filter(filenames, "*.cpp"):
            sources.append(os.path.join(root, filename))
    sources = [f[len(bld.path.abspath()) + 1:] for f in sources]

    # External required libraries for the benchmarks
    benchmark_required = {"bench_rbf.cpp": ["UTILSCPP"]}

    # External optional libraries for the benchmarks
    benchmark_optional = {}

    # Compile all the benchmarks
    for benchmark in sources:
        # Activate optional defines
        if benchmark in benchmark_optional and set(benchmark_optional[benchmark]).issubset(bld.env["libs"]):
            optional_defines = None
        else:
            optional_defines = None

        if benchmark in benchmark_required:
            if set(benchmark_required[benchmark]).issubset(bld.env["libs"]):
                bld.program(
                    features="cxx",
                    install_path=None,
                    source=benchmark,
                    includes=includes_path,
                    uselib=bld.env["libs"],
                    use=bld.env["libname"],
                    defines=optional_defines,
                    cxxflags=bld.get_env()["CXXFLAGS"],
                    target=benchmark[: len(benchmark) - len(".cpp")],
                )
        else:
            bld.program(
                features="cxx",
                install_path=None,
                source=benchmark,
                includes=includes_path,
                uselib=bld.env["libs"],
                use=bld.env["libname"],
                defines=optional_defines,
                cxxflags=bld.get_env()["CXXFLAGS"],
                target=benchmark[: len(benchmark) - len(".cpp")],
            )
