#!/usr/bin/env python
# encoding: utf-8
#
#    This file is part of kernel-lib.
#
#    Copyright (c) 2020, 2021, 2022 Bernardo Fichera <bernardo.fichera@gmail.com>
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

import os
import fnmatch


def build(bld):
    # Includes
    includes_path = ".."

    # Get source files
    sources = []
    for root, _, filenames in os.walk(bld.path.abspath()):
        for filename in fnmatch.filter(filenames, "*.cpp"):
            sources.append(os.path.join(root, filename))
    sources = [f[len(bld.path.abspath()) + 1:] for f in sources]

    # External required libraries for the benchmarks
    benchmark_required = {"bench_kernel.cpp": ["UTILSLIB"],
                          "bench_expansion.cpp": ["UTILSLIB"],
                          "bench_riemann.cpp": ["UTILSLIB"]}

    # External optional libraries for the benchmarks
    benchmark_optional = {}

    # Compile all the benchmarks
    for benchmark in sources:
        # Activate optional defines
        if benchmark in benchmark_optional and set(benchmark_optional[benchmark]).issubset(bld.env["libs"]):
            optional_defines = None
        else:
            optional_defines = None

        if benchmark in benchmark_required:
            if set(benchmark_required[benchmark]).issubset(bld.env["libs"]):
                bld.program(
                    features="cxx",
                    install_path=None,
                    source=benchmark,
                    includes=includes_path,
                    uselib=bld.env["libs"],
                    use=bld.env["libname"],
                    defines=optional_defines,
                    target=benchmark[: len(benchmark) - len(".cpp")],
                )
        else:
            bld.program(
                features="cxx",
                install_path=None,
                source=benchmark,
                includes=includes_path,
                uselib=bld.env["libs"],
                use=bld.env["libname"],
                defines=optional_defines,
                target=benchmark[: len(benchmark) - len(".cpp")],
            )
